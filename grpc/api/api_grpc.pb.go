// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentsServiceClient is the client API for StudentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentsServiceClient interface {
	// Unary
	GetStudentById(ctx context.Context, in *GetStudentByIdRequest, opts ...grpc.CallOption) (*Student, error)
	// Server-side streaming
	GetStudents(ctx context.Context, in *GetStudentsRequest, opts ...grpc.CallOption) (StudentsService_GetStudentsClient, error)
	// Client-side streaming
	// Imports students and returns number of imported students
	ImportStudents(ctx context.Context, opts ...grpc.CallOption) (StudentsService_ImportStudentsClient, error)
	// Bidirectional streaming
	// Imports students and returns them with generated IDs
	ImportStudentsV2(ctx context.Context, opts ...grpc.CallOption) (StudentsService_ImportStudentsV2Client, error)
}

type studentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentsServiceClient(cc grpc.ClientConnInterface) StudentsServiceClient {
	return &studentsServiceClient{cc}
}

func (c *studentsServiceClient) GetStudentById(ctx context.Context, in *GetStudentByIdRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/StudentsService/GetStudentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) GetStudents(ctx context.Context, in *GetStudentsRequest, opts ...grpc.CallOption) (StudentsService_GetStudentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentsService_ServiceDesc.Streams[0], "/StudentsService/GetStudents", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentsServiceGetStudentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudentsService_GetStudentsClient interface {
	Recv() (*GetStudentsResponse, error)
	grpc.ClientStream
}

type studentsServiceGetStudentsClient struct {
	grpc.ClientStream
}

func (x *studentsServiceGetStudentsClient) Recv() (*GetStudentsResponse, error) {
	m := new(GetStudentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentsServiceClient) ImportStudents(ctx context.Context, opts ...grpc.CallOption) (StudentsService_ImportStudentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StudentsService_ServiceDesc.Streams[1], "/StudentsService/ImportStudents", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentsServiceImportStudentsClient{stream}
	return x, nil
}

type StudentsService_ImportStudentsClient interface {
	Send(*ImportStudentsRequest) error
	CloseAndRecv() (*ImportStudentsResponse, error)
	grpc.ClientStream
}

type studentsServiceImportStudentsClient struct {
	grpc.ClientStream
}

func (x *studentsServiceImportStudentsClient) Send(m *ImportStudentsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentsServiceImportStudentsClient) CloseAndRecv() (*ImportStudentsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportStudentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentsServiceClient) ImportStudentsV2(ctx context.Context, opts ...grpc.CallOption) (StudentsService_ImportStudentsV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &StudentsService_ServiceDesc.Streams[2], "/StudentsService/ImportStudentsV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentsServiceImportStudentsV2Client{stream}
	return x, nil
}

type StudentsService_ImportStudentsV2Client interface {
	Send(*ImportStudentsV2Request) error
	Recv() (*ImportStudentsV2Response, error)
	grpc.ClientStream
}

type studentsServiceImportStudentsV2Client struct {
	grpc.ClientStream
}

func (x *studentsServiceImportStudentsV2Client) Send(m *ImportStudentsV2Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentsServiceImportStudentsV2Client) Recv() (*ImportStudentsV2Response, error) {
	m := new(ImportStudentsV2Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentsServiceServer is the server API for StudentsService service.
// All implementations must embed UnimplementedStudentsServiceServer
// for forward compatibility
type StudentsServiceServer interface {
	// Unary
	GetStudentById(context.Context, *GetStudentByIdRequest) (*Student, error)
	// Server-side streaming
	GetStudents(*GetStudentsRequest, StudentsService_GetStudentsServer) error
	// Client-side streaming
	// Imports students and returns number of imported students
	ImportStudents(StudentsService_ImportStudentsServer) error
	// Bidirectional streaming
	// Imports students and returns them with generated IDs
	ImportStudentsV2(StudentsService_ImportStudentsV2Server) error
	mustEmbedUnimplementedStudentsServiceServer()
}

// UnimplementedStudentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentsServiceServer struct {
}

func (UnimplementedStudentsServiceServer) GetStudentById(context.Context, *GetStudentByIdRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentById not implemented")
}
func (UnimplementedStudentsServiceServer) GetStudents(*GetStudentsRequest, StudentsService_GetStudentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedStudentsServiceServer) ImportStudents(StudentsService_ImportStudentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportStudents not implemented")
}
func (UnimplementedStudentsServiceServer) ImportStudentsV2(StudentsService_ImportStudentsV2Server) error {
	return status.Errorf(codes.Unimplemented, "method ImportStudentsV2 not implemented")
}
func (UnimplementedStudentsServiceServer) mustEmbedUnimplementedStudentsServiceServer() {}

// UnsafeStudentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentsServiceServer will
// result in compilation errors.
type UnsafeStudentsServiceServer interface {
	mustEmbedUnimplementedStudentsServiceServer()
}

func RegisterStudentsServiceServer(s grpc.ServiceRegistrar, srv StudentsServiceServer) {
	s.RegisterService(&StudentsService_ServiceDesc, srv)
}

func _StudentsService_GetStudentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).GetStudentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StudentsService/GetStudentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).GetStudentById(ctx, req.(*GetStudentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_GetStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStudentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentsServiceServer).GetStudents(m, &studentsServiceGetStudentsServer{stream})
}

type StudentsService_GetStudentsServer interface {
	Send(*GetStudentsResponse) error
	grpc.ServerStream
}

type studentsServiceGetStudentsServer struct {
	grpc.ServerStream
}

func (x *studentsServiceGetStudentsServer) Send(m *GetStudentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StudentsService_ImportStudents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentsServiceServer).ImportStudents(&studentsServiceImportStudentsServer{stream})
}

type StudentsService_ImportStudentsServer interface {
	SendAndClose(*ImportStudentsResponse) error
	Recv() (*ImportStudentsRequest, error)
	grpc.ServerStream
}

type studentsServiceImportStudentsServer struct {
	grpc.ServerStream
}

func (x *studentsServiceImportStudentsServer) SendAndClose(m *ImportStudentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentsServiceImportStudentsServer) Recv() (*ImportStudentsRequest, error) {
	m := new(ImportStudentsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudentsService_ImportStudentsV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentsServiceServer).ImportStudentsV2(&studentsServiceImportStudentsV2Server{stream})
}

type StudentsService_ImportStudentsV2Server interface {
	Send(*ImportStudentsV2Response) error
	Recv() (*ImportStudentsV2Request, error)
	grpc.ServerStream
}

type studentsServiceImportStudentsV2Server struct {
	grpc.ServerStream
}

func (x *studentsServiceImportStudentsV2Server) Send(m *ImportStudentsV2Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentsServiceImportStudentsV2Server) Recv() (*ImportStudentsV2Request, error) {
	m := new(ImportStudentsV2Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentsService_ServiceDesc is the grpc.ServiceDesc for StudentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StudentsService",
	HandlerType: (*StudentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentById",
			Handler:    _StudentsService_GetStudentById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStudents",
			Handler:       _StudentsService_GetStudents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImportStudents",
			Handler:       _StudentsService_ImportStudents_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportStudentsV2",
			Handler:       _StudentsService_ImportStudentsV2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
